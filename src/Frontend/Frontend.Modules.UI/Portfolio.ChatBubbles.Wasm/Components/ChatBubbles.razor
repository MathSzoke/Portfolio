@using System.Net.Http.Json
@using System.Text.Json
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.JSInterop
@using Portfolio.ChatBubbles.Wasm.Models

<style>
    .bubbles {
        display: flex;
        flex-direction: column;
        gap: 12px;
        width: 100%;
        height: 100%;
        box-sizing: border-box;
    }

    .row {
        display: flex;
    }

        .row.me {
            justify-content: flex-end;
        }

        .row.other {
            justify-content: flex-start;
        }

    .bubble {
        max-width: 60%;
        padding: 10px 12px;
        border-radius: 14px;
        font-size: 14px;
        line-height: 1.4;
        word-break: break-word;
        white-space: pre-wrap;
    }

    .me .bubble {
        background: #5AA268;
        color: #fff;
        border-bottom-right-radius: 6px;
    }

    .other .bubble {
        background: #9399a0;
        color: #fff;
        border-bottom-left-radius: 6px;
    }

    .thinking {
        display: inline-flex;
        gap: 6px;
        align-items: center;
    }

    .dot {
        width: 6px;
        height: 6px;
        border-radius: 50%;
        background: #fff;
        opacity: .7;
        animation: blink 1s infinite;
    }

        .dot:nth-child(2) {
            animation-delay: .2s;
        }

        .dot:nth-child(3) {
            animation-delay: .4s;
        }

    @@keyframes blink {
        0%, 80%, 100% {
            opacity: .2;
        }

        40% {
            opacity: 1;
        }
    }
</style>

<div class="bubbles">
    @foreach (var m in messages)
    {
        var cls = m.Sender == "Visitor" ? "me" : "other";
        <div class="row @cls">
            <div class="bubble">@m.Content</div>
        </div>
    }
    @if (thinking)
    {
        <div class="row other">
            <div class="bubble">
                <span class="thinking"><span class="dot"></span><span class="dot"></span><span class="dot"></span></span>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string? Api { get; set; }
    [Parameter] public string? SessionId { get; set; }

    List<ChatMessageDto> messages = new();
    HubConnection? hub;
    string? lastApi;
    string? lastSession;
    bool thinking;

    [Inject] HttpClient Http { get; set; } = default!;
    [Inject] IJSRuntime JS { get; set; } = default!;

    private sealed class ChatMessagesEnvelope
    {
        public string SessionId { get; set; } = string.Empty;
        public List<ChatMessageItem> ChatMessageItems { get; set; } = new();
    }

    private sealed class ChatMessageItem
    {
        public string Id { get; set; } = string.Empty;
        public string Content { get; set; } = string.Empty;
        public string Sender { get; set; } = string.Empty;
        public DateTime CreatedAt { get; set; }
        public DateTime? ReadAt { get; set; }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrWhiteSpace(Api) || string.IsNullOrWhiteSpace(SessionId)) return;
        if (Api == lastApi && SessionId == lastSession) return;

        lastApi = Api;
        lastSession = SessionId;

        await DisposeHub();
        await FetchMessages();
        await EnsureHub();
    }

    async Task FetchMessages()
    {
        var url = $"{Api}/api/v1/chat/sessions/{SessionId}/messages";
        try
        {
            var resp = await Http.GetAsync(url);
            var body = await resp.Content.ReadAsStringAsync();
            if (!resp.IsSuccessStatusCode || string.IsNullOrWhiteSpace(body))
            {
                messages = new();
                thinking = false;
                StateHasChanged();
                await JS.InvokeVoidAsync("eval", "window.dispatchEvent(new CustomEvent('chat-bubbles-updated'))");
                return;
            }

            var opts = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            var env = JsonSerializer.Deserialize<ChatMessagesEnvelope>(body, opts);
            messages = (env?.ChatMessageItems ?? new())
                .Select(i => new ChatMessageDto
                {
                    Id = i.Id,
                    SessionId = env?.SessionId ?? SessionId ?? string.Empty,
                    Sender = i.Sender,
                    Content = i.Content,
                    CreatedAt = i.CreatedAt,
                    ReadAt = i.ReadAt
                })
                .ToList();

            var last = messages.LastOrDefault();
            thinking = last != null && last.Sender == "Visitor";
            StateHasChanged();
            await JS.InvokeVoidAsync("eval", "window.dispatchEvent(new CustomEvent('chat-bubbles-updated'))");
        }
        catch
        {
            messages = new();
            thinking = false;
            StateHasChanged();
            await JS.InvokeVoidAsync("eval", "window.dispatchEvent(new CustomEvent('chat-bubbles-updated'))");
        }
    }

    async Task EnsureHub()
    {
        hub = new HubConnectionBuilder()
            .WithUrl($"{Api}/hubs/presence")
            .WithAutomaticReconnect()
            .Build();

        hub.On<ChatMessageDto>("message", async m =>
        {
            if (string.IsNullOrWhiteSpace(m.SessionId)) m.SessionId = SessionId ?? m.SessionId;
            if (m.SessionId == SessionId)
            {
                messages.Add(m);
                thinking = m.Sender == "Visitor";
                await InvokeAsync(StateHasChanged);
                await JS.InvokeVoidAsync("eval", "window.dispatchEvent(new CustomEvent('chat-bubbles-updated'))");
            }
        });

        hub.Reconnected += async _ =>
        {
            try { await hub.InvokeAsync("JoinSession", SessionId); } catch { }
        };

        await hub.StartAsync();
        await hub.InvokeAsync("JoinSession", SessionId);
    }

    async Task DisposeHub()
    {
        if (hub is null) return;
        try { await hub.StopAsync(); } catch { }
        try { await hub.DisposeAsync(); } catch { }
        hub = null;
    }

    public async ValueTask DisposeAsync() => await DisposeHub();
}
